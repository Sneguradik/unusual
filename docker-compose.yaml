version: "3.9"

services:
  postgres:
    image: postgres:latest
    container_name: unusual_postgres
    restart: always
    environment:
      POSTGRES_USER: backend
      POSTGRES_PASSWORD: supersecret
      POSTGRES_DB: maindb
    ports:
      - "5436:5432"
    volumes:
      - ./volumes/postgres:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U backend"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend

  webapi:
    build:
      context: ./UnusualBackV2
      dockerfile: ./WebApi/Dockerfile
    container_name: unusual_webapi
    restart: always
    ports:
      - "6060:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
    volumes:
      - ./volumes/logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - backend

  poller:
    build:
      context: ./UnusualBackV2
      dockerfile: ./Poller/Dockerfile
    container_name: unusual_poller
    restart: always
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
    depends_on:
      webapi:
        condition: service_started
    volumes:
      - ./volumes/logs:/app/logs
    networks:
      - backend

  frontend:
    build:
      context: ./unusual_front_v2
    container_name: unusual_frontend
    restart: always
    ports:
      - "3000:3000"

    environment:
      - NODE_ENV=production
    depends_on:
      webapi:
        condition: service_started
    networks:
      - backend

networks:
  backend:
    driver: bridge

